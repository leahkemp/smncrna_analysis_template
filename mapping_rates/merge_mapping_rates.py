import pandas as pd
import yaml
import os

##### INFO #####

# this script reads each file generated by `extract_mapping_info.sh` and merges all the
# data into a single comma seperated file (csv)
# note. the samples are processed in the same order for each file so each row corresponds to the same sample

##### SCRIPT #####

# parse and create a dictionary out of everything in the configuration file
with open("config.yaml") as config:
    config_dict = yaml.safe_load(config)

# extract the template dir parameter from the config file
template_dir=config_dict["template_dir"]

# sample names
with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/raw_read_count_fastq_file.txt")) as file:
    data=file.read().split('\n')
    sample_names=pd.DataFrame(data,columns=['sample'])

# data from raw fastq
with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/raw_read_count_fastq_file.txt")) as file:
    data=file.read().split('\n')
    df1=pd.DataFrame(data,columns=['raw_read_count_fastq_file'])

# data from excerpt pipeline
with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/excerpt_clipped_read_count_fastq_file.txt")) as file:
    data=file.read().split('\n')
    df2=pd.DataFrame(data,columns=['excerpt_clipped_read_count_fastq_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/excerpt_clipped_trimmed_read_count_fastq_file.txt")) as file:
    data=file.read().split('\n')
    df3=pd.DataFrame(data,columns=['excerpt_clipped_trimmed_read_count_fastq_file'])
    
with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/excerpt_clipped_trimmed_filtered_read_count_fastq_file.txt")) as file:
    data=file.read().split('\n')
    df4=pd.DataFrame(data,columns=['excerpt_clipped_trimmed_filtered_read_count_fastq_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/excerpt_failed_quality_filter_read_count_stats_file.txt")) as file:
    data=file.read().split('\n')
    df5=pd.DataFrame(data,columns=['excerpt_failed_quality_filter_read_count_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/excerpt_failed_homopolymer_filter_read_count_stats_file.txt")) as file:
    data=file.read().split('\n')
    df6=pd.DataFrame(data,columns=['excerpt_failed_homopolymer_filter_read_count_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/excerpt_reads_used_for_alignment_stats_file.txt")) as file:
    data=file.read().split('\n')
    df7=pd.DataFrame(data,columns=['excerpt_reads_used_for_alignment_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/excerpt_not_mapped_to_genome_or_libs_stats_file.txt")) as file:
    data=file.read().split('\n')
    df8=pd.DataFrame(data,columns=['excerpt_not_mapped_to_genome_or_libs_stats_file'])

# data from smrnaseq pipeline
with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_raw_read_count_fastqc_file.txt")) as file:
    data=file.read().split('\n')
    df9=pd.DataFrame(data,columns=['smrnaseq_raw_read_count_fastqc_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_trimmed_read_count_fastq_file.txt")) as file:
    data=file.read().split('\n')
    df10=pd.DataFrame(data,columns=['smrnaseq_trimmed_read_count_fastq_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_qc_passed_read_count_fastq_file.txt")) as file:
    data=file.read().split('\n')
    df11=pd.DataFrame(data,columns=['smrnaseq_qc_passed_read_count_fastq_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_qc_passed_rna_type_unknown_read_count_fastq_file.txt")) as file:
    data=file.read().split('\n')
    df12=pd.DataFrame(data,columns=['smrnaseq_qc_passed_rna_type_unknown_read_count_fastq_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_reads_mapped_to_ref_bowtie_stats_file.txt")) as file:
    data=file.read().split('\n')
    df13=pd.DataFrame(data,columns=['smrnaseq_reads_mapped_to_ref_bowtie_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_reads_unmapped_to_ref_bowtie_stats_file.txt")) as file:
    data=file.read().split('\n')
    df14=pd.DataFrame(data,columns=['smrnaseq_reads_unmapped_to_ref_bowtie_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_reads_unmapped_to_ref_summary_file.txt")) as file:
    data=file.read().split('\n')
    df15=pd.DataFrame(data,columns=['smrnaseq_reads_unmapped_to_ref_summary_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_reads_mapped_to_mature_bowtie_stats_file.txt")) as file:
    data=file.read().split('\n')
    df16=pd.DataFrame(data,columns=['smrnaseq_reads_mapped_to_mature_bowtie_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_reads_unmapped_to_mature_bowtie_stats_file.txt")) as file:
    data=file.read().split('\n')
    df17=pd.DataFrame(data,columns=['smrnaseq_reads_unmapped_to_mature_bowtie_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_reads_mapped_to_hairpin_bowtie_stats_file.txt")) as file:
    data=file.read().split('\n')
    df18=pd.DataFrame(data,columns=['smrnaseq_reads_mapped_to_hairpin_bowtie_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_reads_unmapped_to_hairpin_bowtie_stats_file.txt")) as file:
    data=file.read().split('\n')
    df19=pd.DataFrame(data,columns=['smrnaseq_reads_unmapped_to_hairpin_bowtie_stats_file'])

with open(os.path.join(template_dir, "mapping_rates/extracted_all_samples/smrnaseq_reads_unmapped_to_hairpin_fastq_file.txt")) as file:
    data=file.read().split('\n')
    df20=pd.DataFrame(data,columns=['smrnaseq_reads_unmapped_to_hairpin_fastq_file'])

# merge all the dataframes into a single dataframe
# "axis=1" tells it to merge as columns
merged_df = pd.concat([sample_names, df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12, df13, df14, df15, df16, df17, df18, df19, df20], axis=1)

# write dataframe to file
merged_df.to_csv((os.path.join(template_dir, "mapping_rates/mapping_rates.csv")), index = False)
